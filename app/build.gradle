apply plugin: 'com.android.model.application'

// Root of 3rd party lib(s): location could be anywhere on the host system
def lib_distribution_root = '../externals'
model {
    repositories {
        libs(PrebuiltLibraries) {
            // Configure one pre-built lib: shared
            iconv {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${lib_distribution_root}/iconv/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${lib_distribution_root}/iconv/lib/${targetPlatform.getName()}/libiconv.so")
                }
            }

            soundtouch {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${lib_distribution_root}/soundtouch/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${lib_distribution_root}/soundtouch/libs/${targetPlatform.getName()}/libsoundtouch.so")
                }
            }

            nihstro {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${lib_distribution_root}/nihstro/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${lib_distribution_root}/nihstro/libs/${targetPlatform.getName()}/libnihstro.so")
                }
            }

            fmt {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${lib_distribution_root}/fmt/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/fmt/libs/${targetPlatform.getName()}/libfmt.a")
                }
            }

            lcatch { // Catch
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${lib_distribution_root}/catch/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/catch/libs/${targetPlatform.getName()}/libcatch.a")
                }
            }

            shaderc {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${lib_distribution_root}/shaderc/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/shaderc/libs/${targetPlatform.getName()}/libshaderc.a")
                }
            }

            boost {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${lib_distribution_root}/boost/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_atomic.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_chrono.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_container.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_context.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_coroutine.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_date_time.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_exception.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_filesystem.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_graph.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_iostreams.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_locale.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_log.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_log_setup.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_math_c99.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_math_c99f.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_math_c99l.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_math_tr1.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_math_tr1f.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_math_tr1l.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_program_options.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_python.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_random.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_regex.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_serialization.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_signals.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_system.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_thread.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_timer.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_type_erasure.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_wave.a")
                    staticLibraryFile = file("${lib_distribution_root}/boost/libs/${targetPlatform.getName()}/libboost_wserialization.a")
                }
            }
        }
    }
    android {
        compileSdkVersion 25
        buildToolsVersion "25.0.3"

        defaultConfig {
            applicationId "org.citraemu.citra"
            minSdkVersion.apiLevel 24
            targetSdkVersion.apiLevel 25
            versionCode 1
            versionName "1.0"
        }

        ndk {
            abiFilters.addAll(["armeabi-v7a", "arm64-v8a", "mips", "mips64", "x86", "x86_64"])
            moduleName "Citra"
            toolchain "clang"
            stl "gnustl_static"
            ldLibs.addAll(["atomic", "log", "GLESv2"])
            cppFlags.addAll(['-std=c++14',
                             '-DANDROID=1',
                             '-I' + file('src/main/jni'),
                             '-I' + file('src/main/jni/common'),
                             '-I' + file('src/main/jni/common/logging')])
        }

        sources {
            main {
                jni {
                    dependencies {
                        library "iconv" linkage "shared"
                        library "soundtouch" linkage "shared"
                        library "nihstro" linkage "shared"
                        library "fmt" linkage "static"
                        library "lcatch" linkage "static" // Catch
                        library "shaderc" linkage "static"
                        library "boost" linkage "static"
                    }
                }
                jniLibs {
                    // for shared lib, lib need to be pushed to the target too
                    // Once libs are copied into app/src/main/jniLibs directory,
                    // Android Studio will pack them into APK's lib/ directory
                    // Here we like to avoid another duplication by pointing
                    // to the files that containing our libs' distribution location
                    // so the same file is used by compiler at host, also packed
                    // into APk to be used at Target (phone/tablet)
                    source {
                        srcDir "${lib_distribution_root}/iconv/lib"
                        srcDir "${lib_distribution_root}/soundtouch/lib"
                        srcDir "${lib_distribution_root}/nihstro/lib"
                    }
                }
            }
        }

        buildTypes {
            debug {
                debuggable true
            }
            release {
                minifyEnabled false
                proguardFiles.add(file('proguard-rules-pro'))
            }
        }
    }

    android.lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.google.android.gms:play-services-ads:10.2.6'
    compile 'com.github.bluejamesbond:textjustify-android:2.1.6'
}
